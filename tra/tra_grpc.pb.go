// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TraServiceClient is the client API for TraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraServiceClient interface {
	Nodes(ctx context.Context, in *TraRequest, opts ...grpc.CallOption) (*TraResponse, error)
	Subscribe(ctx context.Context, in *TraRequest, opts ...grpc.CallOption) (TraService_SubscribeClient, error)
}

type traServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTraServiceClient(cc grpc.ClientConnInterface) TraServiceClient {
	return &traServiceClient{cc}
}

func (c *traServiceClient) Nodes(ctx context.Context, in *TraRequest, opts ...grpc.CallOption) (*TraResponse, error) {
	out := new(TraResponse)
	err := c.cc.Invoke(ctx, "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/nodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traServiceClient) Subscribe(ctx context.Context, in *TraRequest, opts ...grpc.CallOption) (TraService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TraService_ServiceDesc.Streams[0], "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &traServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TraService_SubscribeClient interface {
	Recv() (*TraResponse, error)
	grpc.ClientStream
}

type traServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *traServiceSubscribeClient) Recv() (*TraResponse, error) {
	m := new(TraResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TraServiceServer is the server API for TraService service.
// All implementations must embed UnimplementedTraServiceServer
// for forward compatibility
type TraServiceServer interface {
	Nodes(context.Context, *TraRequest) (*TraResponse, error)
	Subscribe(*TraRequest, TraService_SubscribeServer) error
	mustEmbedUnimplementedTraServiceServer()
}

// UnimplementedTraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTraServiceServer struct {
}

func (UnimplementedTraServiceServer) Nodes(context.Context, *TraRequest) (*TraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (UnimplementedTraServiceServer) Subscribe(*TraRequest, TraService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTraServiceServer) mustEmbedUnimplementedTraServiceServer() {}

// UnsafeTraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraServiceServer will
// result in compilation errors.
type UnsafeTraServiceServer interface {
	mustEmbedUnimplementedTraServiceServer()
}

func RegisterTraServiceServer(s grpc.ServiceRegistrar, srv TraServiceServer) {
	s.RegisterService(&TraService_ServiceDesc, srv)
}

func _TraService_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraServiceServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraServiceServer).Nodes(ctx, req.(*TraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TraServiceServer).Subscribe(m, &traServiceSubscribeServer{stream})
}

type TraService_SubscribeServer interface {
	Send(*TraResponse) error
	grpc.ServerStream
}

type traServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *traServiceSubscribeServer) Send(m *TraResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TraService_ServiceDesc is the grpc.ServiceDesc for TraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.extensions.filters.network.sip_proxy.tra.v3.TraService",
	HandlerType: (*TraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "nodes",
			Handler:    _TraService_Nodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe",
			Handler:       _TraService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tra.proto",
}
